---
import { Sprite } from 'astro-icon';
import normalizeUrl from 'normalize-url';
import { getBrandDetailsFromSlug } from 'src/api/brands';
import type { AugmentedTeaDocument } from 'src/api/teas';
import AddTeaCtaWell from 'src/components/AddTeaCtaWell.astro';
import Detail from 'src/components/Detail.astro';
import DetailsGrid from 'src/components/DetailsGrid.astro';
import EllipsisWithDropdownMenu from 'src/components/EllipsisWithDropdownMenu.astro';
import TeaCard from 'src/components/TeaCard.astro';
import Layout from 'src/layouts/Layout.astro';

const {brandSlug} = Astro.params;
if (!brandSlug) {
	return;
}

const brand = await getBrandDetailsFromSlug(brandSlug);

if (!brand) {
	Astro.redirect('/');
	return;
}

const teas = brand.teas as AugmentedTeaDocument[];

let teasAddedLabel = `${teas.length} teas`;
if (teas.length === 0) {
	teasAddedLabel = 'None';
} else if (teas.length === 1) {
	teasAddedLabel = '1 tea';
}

const editHref = new URL(`/brands/${brandSlug}/edit/`, Astro.url);

---

<Layout
	title={brand.name}
	description={`Check out teas from ${brand?.name} on Infusion!`}
>
	<EllipsisWithDropdownMenu>
		<li>
			<Sprite
				aria-hidden="true"
				focusable="false"
				name="mdi:pencil"
			/>
			<a href={editHref}>
				Edit
			</a>
		</li>
	</EllipsisWithDropdownMenu>
	<h1>{brand.name}</h1>
	<DetailsGrid>
		{!!brand.url && (
			<Detail name="Site">
				<a href={brand.url}>
					{normalizeUrl(brand.url, {stripProtocol: true})}
				</a>
			</Detail>
		)}
		{!!brand.twitter && (
			<Detail name="Twitter">
				<a href={`https://twitter.com/${brand.twitter}`}>
					@{brand.twitter}
				</a>
			</Detail>
		)}
		<Detail name="Teas Added">
			{teasAddedLabel}
		</Detail>
	</DetailsGrid>
	<section id="teas" aria-labelledby="teas-heading">
		<h2 id="teas-heading">Teas</h2>
		<AddTeaCtaWell
			brand={brand}
			teas={teas}
		/>
		<ul class="card-list">
			{teas.map(tea => (
				<li>
					<TeaCard
						brand={brand}
						tea={tea}
						steeps={tea.steeps}
					/>
				</li>
			))}
		</ul>
	</section>
</Layout>

<style lang="scss">
	@use 'open-props-scss' as op;
	@use '../../styles/tokens.scss' as tokens;

	.card-list {
		display: grid;
		--min: 30ch;
		grid-template-columns: repeat(
			auto-fill,
			minmax(
				min(100%, var(--min)),
				1fr
			));
		gap: op.$size-fluid-2 op.$size-fluid-3;
		margin-block: op.$size-fluid-2;
	}

	:global(dl) {
		margin-block-start: op.$size-fluid-1;
		margin-block-end: op.$size-fluid-3;
	}
	:global(.ellipsis-menu) {
		float: right;
		margin-block-start: -0.5rem;
		margin-inline-end: -1.25rem;
		position: relative;
	}
</style>