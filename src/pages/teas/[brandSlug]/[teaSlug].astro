---
import type { ObjectId, WithId } from 'mongodb';
import { getBrandBySlug } from '../../../api/brands';
import { getSteepsForTea } from '../../../api/steeps';
import { getTeaBySlugs } from '../../../api/teas';
import AvailabilityDetail from '../../../components/AvailabilityDetail.astro';
import Detail from '../../../components/Detail.astro';
import DetailsGrid from '../../../components/DetailsGrid.astro';
import PreparationDetails from '../../../components/PreparationDetails.astro';
import StaticRating from '../../../components/StaticRating.astro';
import SteepCtaWell from '../../../components/SteepCtaWell.astro';
import SteepEntry from '../../../components/SteepEntry.astro';
import Layout from '../../../layouts/Layout.astro';
import type { Rating, Steep, Tea, WithEmptyStringOption } from '../../../types/api';

const {brandSlug = '', teaSlug = ''} = Astro.params;
if (!brandSlug || !teaSlug) {
	Astro.redirect('/', 301);
}

const [tea, brand] = await Promise.all([
	getTeaBySlugs(brandSlug, teaSlug),
	getBrandBySlug(brandSlug)
]);

const steeps = tea ? await getSteepsForTea(tea._id) : [];
const mostRecentSteep: Steep | undefined = steeps[0];
const favoriteSteep = tea?.favoriteSteep ?
	steeps.find(steep => (steep._id.toString() === tea.favoriteSteep?.toString())) :
	undefined;

const highestRating = steeps.reduce((currentMax: WithEmptyStringOption<Rating>, steep) => {
	if (!steep.rating) {
		return currentMax;
	}

	const numericRatingOfCurrentSteep = Number(steep.rating);
	const numericRatingOfCurrentMax = Number(currentMax);
	if (numericRatingOfCurrentSteep > numericRatingOfCurrentMax) {
		return steep.rating;
	}

	return currentMax;
}, '');

const brandUrl = new URL(`/brands/${brandSlug}/`, Astro.url);
const showRecommendationDetail = !!(
	tea?.recommendedSteepTime ||
	(tea?.recommendedSteepTemperature && tea?.recommendedSteepTemperature > 0) ||
	tea?.recommendedAmount
);

function getSteepHash(steepId: ObjectId) {
	return `steep-${steepId.toString()}`;
}

const steepCtaUrl = new URL(`/steeps/new/?tea=${tea?._id}`, Astro.url);

---

<Layout
	title={`${tea?.name} | ${brand?.name}`}
	prefetches={[steepCtaUrl, brandUrl]}
>
	<hgroup>
		<h1>{tea?.name}</h1>
		<p class="subtitle">{brand?.name}</p>
	</hgroup>
	<DetailsGrid minimumDetailWidthPrint="15ch">
		<Detail name="Brand">
			<a href={brandUrl}>{brand?.name}</a>
		</Detail>
		{!!tea?.teaType?.length && (
			<Detail name="Type">
				{tea.teaType.join(', ')}
			</Detail>
		)}
		{tea?.caffeineLevel && (
			<Detail name="Caffeine Content">
				{tea.caffeineLevel}
			</Detail>
		)}
		{!!tea?.ingredients?.length && (
			<Detail name="Ingredients">
				<span class="capitalize-first-letter">
					{tea.ingredients.join(', ')}
				</span>
			</Detail>
		)}
		{tea?.price && (
			<Detail name="Price">
				{tea.price}
			</Detail>
		)}
		{showRecommendationDetail && (
			<Detail name="Recommendation">
				<PreparationDetails
					amount={tea.recommendedAmount}
					degreesFahrenheit={
						(tea.recommendedSteepTemperature && tea.recommendedSteepTemperature > 0) ?
							tea.recommendedSteepTemperature :
							undefined
					}
					freeform={tea.recommendedHotOrIced !== 'Iced'}
					hotOrIced={tea.recommendedHotOrIced}
					steepTime={tea.recommendedSteepTime}
				/>
			</Detail>
		)}
		<AvailabilityDetail
			availability={tea?.availability}
			discontinued={tea?.discontinued}
			monthsAvailable={tea?.monthsAvailable}
		/>
		<Detail name="Steeped">
			{steeps.length} {steeps.length === 1 ? ' time' : ' times'}
		</Detail>
		{mostRecentSteep && (
			<Detail name="Last Steeped">
				{mostRecentSteep.date.toLocaleDateString('en-us', {month: 'short', day: 'numeric', year: 'numeric'})}
			</Detail>
		)}
		{favoriteSteep && (
			<Detail name="Favorite Steep">
				<a href={`#${getSteepHash(favoriteSteep._id)}`}>
					{favoriteSteep.date.toLocaleDateString('en-us', {month: 'short', day: 'numeric', year: 'numeric'})}
				</a>
			</Detail>
		)}
		{highestRating && (
			<Detail name="Highest Rating">
				<StaticRating rating={highestRating} />
			</Detail>
		)}
		{tea?.preferredStyles && (
			<Detail name="Preferred Steeps">
				{tea.preferredStyles}
			</Detail>
		)}
	</DetailsGrid>
	<section id="steeps" aria-labelledby="steeps-heading">
		<h2
			id="steeps-heading"
			class:list={[{'no-print': !steeps.length}]}
		>
			Steeps
		</h2>
		<SteepCtaWell
			tea={tea as WithId<Tea>}
			steeps={steeps}
			url={steepCtaUrl}
		/>
		{!!steeps.length && (
			<ul class="card-list">
				{steeps.map(steep => (
					<li>
						<SteepEntry
							steep={steep}
							tea={tea as WithId<Tea>}
							highlightTea={false}
						/>
					</li>
				))}
			</ul>
		)}
	</section>
</Layout>

<style lang="scss">
	@use 'open-props-scss' as op;

	hgroup {
		margin-block-end: op.$size-fluid-2;
	}

	section {
		margin-block-start: op.$size-fluid-3;
	}

	.subtitle {
		text-transform: uppercase;
		font-weight: op.$font-weight-7;
	}

	.card-list > * + * {
		margin-block-start: op.$size-4;
	}
</style>