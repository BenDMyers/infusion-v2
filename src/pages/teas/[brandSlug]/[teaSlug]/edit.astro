---
import Select from 'svelte-select';
import { getAllBrandsDetails } from '../../../../api/brands';
import { getAllIngredients } from '../../../../api/ingredients';
import { getTeaDetailsBySlugs } from '../../../../api/teas';
import { getAllTeaTypes } from '../../../../api/teaTypes';
import FormLogic from '../../../../components/FormLogic.astro';
import MultiMonthSelect from '../../../../components/MultiMonthSelect.astro';
import Layout from '../../../../layouts/Layout.astro';
import type { Month } from '../../types/api';
import type { Option } from '../../../../types/ui';
import { field } from '../../../../utils/field';
import { caffeineContentValues, hotOrIced } from '../../../../utils/tea-enums';

const {brandSlug = '', teaSlug = ''} = Astro.params;

const tea = await getTeaDetailsBySlugs(brandSlug, teaSlug);

const [brands, teaTypes, ingredients] = await Promise.all([
	getAllBrandsDetails(),
	getAllTeaTypes(),
	getAllIngredients()
]);
const brandOptions: Option[] = brands.map(brand => ({
	label: brand.name,
	value: brand._id.toString()
}));

const teaTypeOptions: Option[] = teaTypes.map(teaType => ({
	label: teaType.name,
	value: teaType._id.toString()
}));

const ingredientOptions: Option[] = ingredients.map(ingredients => ({
	label: ingredients.name,
	value: ingredients.name
}));

const caffeineContentOptions: Option[] = caffeineContentValues.map(caffeineContent => ({
	label: caffeineContent,
	value: caffeineContent
}));

const recommendedHotOrIcedOptions: Option[] = hotOrIced.map(brewTemp => ({
	label: brewTemp,
	value: brewTemp
}));
---

<Layout
	title={`Edit ${tea?.name}`}
	description={`Edit ${tea?.name}'s details on Infusion.`}
>
	<h1>Edit {tea?.name}</h1>
	<form action={`/api/tea/${tea?._id}`} method="post">
		<input
			type="hidden"
			name="_id"
			value={tea?._id.toString() || ''}
		/>
		<input
			type="hidden"
			name="_method"
			value="put"
		/>
		<div class="row">
			<div data-field="vendor">
				<label for="vendor">Brand</label>
				<Select
					client:load
					name="vendor"
					id="vendor"
					items={brandOptions}
					inputAttributes={{
						// required: true,
						autocomplete: 'off',
						'aria-required': 'true',
						'data-lpignore': 'true'
					}}
					required
					clearable={false}
					showChevron
					placeholder=""
					value={brandOptions.find(opt => (opt.value === tea?.vendor.toString()))}
				/>
				<small id="vendor-error" class="error-message"></small>
			</div>
			<div data-field="name">
				<label for="name">Name</label>
				<input
					{...field('name')}
					type="text"
					required
					minlength="1"
					value={tea?.name}
				/>
				<small id="name-error" class="error-message"></small>
			</div>
			<div data-field="teaType">
				<label for="teaType">Type</label>
				<Select
					client:load
					name="teaType"
					id="teaType"
					items={teaTypeOptions}
					inputAttributes={{
						autocomplete: 'off',
						'data-lpignore': 'true'
					}}
					multiple
					clearable={false}
					showChevron
					placeholder=""
					value={tea?.teaType?.map(teaType => teaTypeOptions.find(opt => (opt.label === teaType)))}
				/>
				<small id="teaType-error" class="error-message"></small>
			</div>
		</div>
		<div class="row">
			<div data-field="caffeineLevel">
				<label for="caffeineLevel">Caffeine Content</label>
				<Select
					client:load
					name="caffeineLevel"
					id="caffeineLevel"
					items={caffeineContentOptions}
					clearable={false}
					searchable={false}
					showChevron
					value={tea?.caffeineLevel}
				/>
				<small id="caffeineLevel-error" class="error-message"></small>
			</div>
			<div data-field="ingredients">
				<label for="ingredients">Ingredients</label>
				<Select
					client:load
					name="ingredients"
					id="ingredients"
					items={ingredientOptions}
					inputAttributes={{
						autocomplete: 'off',
						'data-lpignore': 'true'
					}}
					multiple
					clearable={false}
					showChevron
					placeholder=""
					value={tea?.ingredients}
				/>
				<small id="ingredients-error" class="error-message"></small>
			</div>
			<div data-field="price">
				<label for="price">Price</label>
				<input
					{...field('price')}
					type="text"
					value={tea?.price}
				/>
				<small id="price-error" class="error-message"></small>
			</div>
		</div>
		<div class="row">
			<div data-field="recommendedHotOrIced">
				<label for="recommendedHotOrIced">Recommended Hot or Iced</label>
				<Select
					client:load
					name="recommendedHotOrIced"
					id="recommendedHotOrIced"
					items={recommendedHotOrIcedOptions}
					clearable={false}
					searchable={false}
					showChevron
					value={tea?.recommendedHotOrIced}
				/>
				<small id="recommendedHotOrIced-error" class="error-message"></small>
			</div>
			<div data-field="recommendedAmount">
				<label for="recommendedAmount">Recommended Amount</label>
				<input
					{...field('recommendedAmount')}
					type="text"
					value={tea?.recommendedAmount}
				/>
				<small id="recommendedAmount-error" class="error-message"></small>
			</div>
			<div data-field="recommendedSteepTime">
				<label for="recommendedSteepTime">Recommended Steep Time</label>
				<input
					{...field('recommendedSteepTime')}
					type="text"
					value={tea?.recommendedSteepTime}
				/>
				<small id="recommendedSteepTime-error" class="error-message"></small>
			</div>
			<div data-field="recommendedSteepTemperature">
				<label for="recommendedSteepTemperature">Recommended Temperature (â„‰)</label>
				<input
					{...field('recommendedSteepTemperature')}
					type="number"
					placeholder="0"
					value={tea?.recommendedSteepTemperature}
				/>
				<small id="recommendedSteepTemperature-error" class="error-message"></small>
			</div>
		</div>
		<div class="row">
			<div data-field="availability">
				<label for="availability">Availability</label>
				<input
					{...field('availability')}
					type="text"
					value={tea?.availability}
				/>
				<small id="availability-error" class="error-message"></small>
			</div>
			<fieldset data-field="discontinued">
				<legend>Discontinued?</legend>
				<label class="inline-label">
					<input
						type="checkbox"
						name="discontinued"
						id="discontinued"
						checked={tea?.discontinued}
					/>
					<span>This tea is no longer available</span>
				</label>
				<small id="discontinued-error" class="error-message"></small>
			</fieldset>
			<fieldset data-field="monthsAvailable">
				<legend>Months Available</legend>
				<MultiMonthSelect
					name="monthsAvailable"
					defaultValue={tea?.monthsAvailable as Month[]}
				/>
				<small id="monthsAvailable-error" class="error-message"></small>
			</fieldset>
		</div>
		<div class="row">
			<div data-field="preferredStyles">
				<label for="preferredStyles">Preferred Styles</label>
				<input
					{...field('preferredStyles')}
					type="text"
					value={tea?.preferredStyles}
				/>
				<small id="preferredStyles-error" class="error-message"></small>
			</div>
			<div data-field="toTry">
				<label for="toTry">To Try</label>
				<input
					{...field('toTry')}
					type="text"
					value={tea?.toTry}
				/>
				<small id="toTry-error" class="error-message"></small>
			</div>
			<div data-field="memo">
				<label for="memo">Memo</label>
				<input
					{...field('memo')}
					type="text"
					value={tea?.memo}
				/>
				<small id="memo-error" class="error-message"></small>
			</div>
		</div>
		<button type="submit">
			<span class="contents">Submit</span>
		</button>
	</form>
</Layout>
<FormLogic />

<style lang="scss">
	@use 'sass:math';
	@use 'open-props-scss' as op;

	:global(form) {
		margin-block-start: op.$size-4;
	}

	[data-field="vendor"],
	[data-field="caffeineLevel"],
	[data-field="price"],
	[data-field="discontinued"], {
		width: math.percentage($number: 3 / 16);
	}

	[data-field="name"],
	[data-field="recommendedHotOrIced"],
	[data-field="recommendedAmount"],
	[data-field="recommendedSteepTime"],
	[data-field="recommendedSteepTemperature"],
	[data-field="availability"],
	[data-field="memo"] {
		width: math.percentage($number: 4 / 16);
	}

	[data-field="preferredStyles"],
	[data-field="toTry"] {
		width: math.percentage($number: 6 / 16);
	}

	[data-field="monthsAvailable"],
	[data-field="teaType"] {
		width: math.percentage($number: 9 / 16);
	}

	[data-field="ingredients"] {
		width: math.percentage($number: 10 / 16);
	}
</style>