---
import type { WithId } from 'mongodb';
import { getAllBrandsDetails } from 'src/api/brands';
import type { AugmentedTeaDocument } from 'src/api/teas';
import FormLogic from 'src/components/FormLogic.astro';
import TeaCard from 'src/components/TeaCard.astro';
import TeaFilterWell from 'src/components/TeaFilterWell.astro';
import Layout from 'src/layouts/Layout.astro';
import type { Brand } from 'src/types/api';
import { sluggify } from 'src/utils/slug';

const brands = await getAllBrandsDetails();
const teaCount = brands.reduce((totalTeaCount, brand) => {
	return totalTeaCount + brand.teas.length;
}, 0);
const formattedTeaCount = new Intl.NumberFormat('en-us').format(teaCount);

function getBrandUrl(brand: WithId<Brand>) {
	const brandSlug = sluggify(brand.name);
	return new URL(`/brands/${brandSlug}/`, Astro.url);
}

---

<Layout
	title="My Teas"
	description={`Check out all ${formattedTeaCount} teas on Infusion!`}
>
	<h1>My Teas</h1>
	<TeaFilterWell />
	<div hidden class="no-teas-found">
		<p>No teas found.</p>
	</div>
	{
		brands.map((brand) => {
			const brandId = brand._id.toString();
			const teas = brand.teas as AugmentedTeaDocument[];

			if (!teas.length) {
				return;
			}

			return (
				<section data-brand={brandId} aria-labelledby={`brand-${brandId}-heading`}>
					<h2 id={`brand-${brandId}-heading`}>
						<a href={getBrandUrl(brand)}>
							{brand.name}
						</a>
					</h2>
					<ul class="card-list">
						{teas.map(tea => (
							<li data-tea={tea._id.toString()}>
								<TeaCard
									brand={brand}
									tea={tea}
									steeps={tea.steeps}
								/>
							</li>
						))}
					</ul>
				</section>
			);
		})
	}
</Layout>
<FormLogic />

<style lang="scss">
	@use 'open-props-scss' as op;
	@use 'src/styles/tokens.scss' as tokens;

	section {
		margin-block-start: op.$size-fluid-4;
		
		&:not(:has(.ellipsis-menu[open], h2:focus-within)) {
			contain-intrinsic-size: auto 300px;
			content-visibility: auto;
		}
	}

	h1 {
		margin-block-end: op.$size-fluid-3;
	}

	h2 a {
		color: tokens.$teal-9;
		text-decoration-thickness: 1px;
		font-weight: 900;

		&:not(:hover):not(:focus) {
			text-decoration: none;
		}
	}

	.card-list {
		display: grid;
		--min: 30ch;
		grid-template-columns: repeat(
			auto-fill,
			minmax(
				min(100%, var(--min)),
				1fr
			));
		gap: op.$size-fluid-2 op.$size-fluid-3;
		margin-block: op.$size-fluid-2;
	}

	.no-teas-found {
		display: grid;
		place-items: center;
		font-size: op.$font-size-4;
		padding: op.$size-10;
		color: op.$stone-7;
	}
</style>

<!-- <script>
	document.addEventListener('mouseover', (event) => {
		const target = event.target;
		if (!target) {
			return;
		}
		const cardLink = (target as HTMLElement).closest('.card-list article a') as HTMLAnchorElement | undefined;
		if (!cardLink) {
			return;
		}

		const {href} = cardLink;
		const alreadyPrefetched = !!document.querySelector(`link[rel="prerender"][href="${href}"]`);
		if (alreadyPrefetched) {
			return;
		}

		const prefetch = document.createElement('link');
		prefetch.setAttribute('rel', 'prerender');
		prefetch.setAttribute('href', href);
		document.head.appendChild(prefetch);
	});
</script> -->