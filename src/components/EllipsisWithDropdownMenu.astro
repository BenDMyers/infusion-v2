---
import {Sprite} from 'astro-icon';

export interface Props {
	label?: string;
};

const {
	label = 'Menu'
} = Astro.props;
---

<details class="ellipsis-menu no-print">
	<summary aria-label={label}>
		<Sprite
			name="mdi:ellipsis-horizontal"
			aria-hidden="true"
			focusable="false"
		/>
	</summary>
	<menu>
		<slot />
	</menu>
</details>

<style lang="scss">
	@use 'sass:color';
	@use 'sass:math';
	@use 'open-props-scss' as op;
	@use '../styles/tokens.scss' as tokens;
	@import '../styles/mixins.scss';

	summary {
		list-style: none;
		width: 5ch;
		// outline: 1px solid tomato;
		padding: op.$size-1;

		&::-webkit-details-marker {
			display: none;
		}

		svg {
			height: op.$font-size-4;
			margin-block-end: -0.075rem;
			width: 3ch;
			opacity: 0.7;
		}

		&:hover svg {
			background-color: color.scale(op.$stone-3, $alpha: -30%);
			
			:global([data-availability="unavailable"]) & {
				background-color: color.scale(op.$stone-5, $alpha: -50%);
			}
		}

		&:focus-visible {
			outline: none !important;
			svg {
				outline: 3px solid tokens.$teal-8;
			}
		}
	}

	menu {
		cursor: auto;
		// box-shadow: op.$shadow-3;
		filter: drop-shadow(0px 1px 2px rgba(130,130,130,1));
		background: var(--tooltip-surface);
		min-width: max-content;
		position: absolute;
		// left: -10px;
		left: -50px;
		top: 35px;
		border-radius: 4px;
		right: 0;
		z-index: op.$layer-important;
		list-style: none;
		
		&:before {
			content: '';
			border-bottom: 12px solid var(--tooltip-surface);
			border-left: 8px solid transparent;
			border-right: 8px solid transparent;
			height: 0;
			left: 62px;
			position: absolute;
			top: -10px;
			width: 0;

			@media (forced-colors: active) {
				border-bottom: 12px solid Canvas;
				border-left: 8px solid Canvas;
				border-right: 8px solid Canvas;
			}
		}

		:global(li) {
			@include fully-clickable();

			display: flex;
			align-items: center;
			gap: 0.3rem;
			// outline: 1px dashed cornflowerblue;
			padding: 5px 12px;
			color: var(--ink);
			min-width: max-content;

			&:not(:last-child) {
				border-block-end: 1px solid op.$stone-4;
			}

			&:hover {
				background-color: op.$stone-2;
			}

			&:has(:focus-visible) {
				outline: 3px solid tokens.$teal-8;
				&  :global(:focus-visible) {
					outline: none;
				}
			}

			:global(a) {
				color: inherit;
				text-decoration: none;
				// font-weight: op.$font-weight-6;
			}

			:global(button) {
				border: none;
				background: none;
			}

			&.danger {
				color: op.$pink-9;
			}
		}

		:global(svg) {
			display: inline;
			aspect-ratio: op.$ratio-square;
			height: 1rem;
			width: 1rem;
			pointer-events: none;
		}
	}
</style>

<script>
	type Action = 'delete';
	type Resource = 'brand' | 'steep' | 'tea';

	document.addEventListener('click', function(event) {
		const openDropdown = document.querySelector<HTMLDetailsElement>('.ellipsis-menu[open]');
		if (event.target && !!openDropdown) {
			const target = event.target as HTMLElement;
			if (!target.closest('.ellipsis-menu[open]')) {
				openDropdown.open = false;
			}
		}
	});

	document.addEventListener('click', function (event) {
		const target = event.target as HTMLElement;
		if (!target) { return; }

		const actionButton = target.closest<HTMLButtonElement>('[data-action]');
		if (!actionButton) { return; }

		const VALID_ACTIONS: Action[] = ['delete'];
		const action = actionButton.getAttribute('data-action') as Action;
		if (!VALID_ACTIONS.includes(action)) { return; }

		const resource = actionButton.getAttribute('data-resource') as Resource;
		const resourceId = actionButton.getAttribute('data-resource-id') as string;
		const modalTitle = actionButton.getAttribute('data-modal-title') as string;
		const modalBody = actionButton.getAttribute('data-modal-body') as string;

		switch (action) {
			case 'delete':
				if (!resource || !resourceId) {
					return;
				}
				openModal({
					title: modalTitle || 'Are you really sure you want to do this?',
					body: modalBody || 'This action cannot be undone.',
					keepOpenOnConfirmation: true
				}).then(() => {
					fetch(
						`/api/${resource}/${resourceId}`,
						{method: 'delete', referrerPolicy: 'origin-when-cross-origin'}
					).then((res) => {
						if (res.ok) {
							window.location.reload();
						}
					})
				})
				.catch(() => console.log('closed'));
				// alert(`/api/${resource}/${resourceId}`)
				
				break;
			default:
				return;
		}
	})
</script>