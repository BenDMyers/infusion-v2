<script>
	import type { Month } from '../types/api';

	function setSubmitButtonLoading(form: HTMLFormElement, loading: boolean) {
		const submitButton = form.querySelector<HTMLButtonElement>('[type="submit"]');
		if (loading) {
			submitButton?.setAttribute('data-state', 'loading');
		} else {
			submitButton?.removeAttribute('data-state');
		}
	}

	document
	.querySelector<HTMLFormElement>('form[action]')
	?.addEventListener('submit', async (event) => {
		event.preventDefault();

		const form = event.currentTarget as HTMLFormElement;
		const endpoint = form.action;
		const method = form.method;

		const options = {
			method,
			body: new FormData(form)
		} as RequestInit;

		setSubmitButtonLoading(form, true);

		const response = await fetch(endpoint, options);
		if (response.redirected) {
			window.location.href = response.url;
		}

		const body = await response.json();

		if (!response.ok) {
			const errors = Object.entries(body.errors ?? {});
			for (const [fieldName, errorMessage] of errors) {
				const field = document.querySelector<HTMLInputElement>(`[name="${fieldName}"]`);
				const errorMessageNode = document.querySelector<HTMLSpanElement>(`[name="${fieldName}"] + .error-message`);
				if (field) {
					field.setAttribute('aria-invalid', 'true');
				}
				if (errorMessageNode) {
					errorMessageNode.innerText = (errorMessage as string);
				}
			}

			const firstErroneousField = form.querySelector<HTMLInputElement>('[aria-invalid]');
			firstErroneousField?.focus();
			setSubmitButtonLoading(form, false);
			return;
		}

		if (body.goto) {
			window.location.href = body.goto;
		}
	});

	document.addEventListener('change', (event) => {
		const target = event.target as HTMLInputElement;
		target.removeAttribute('aria-invalid');
		const siblingNode = target.nextElementSibling;
		if (siblingNode && siblingNode.classList.contains('error-message')) {
			siblingNode.innerHTML = '';
		}
	});

	document.addEventListener('click', (event) => {
		const target = event.target as HTMLElement;
		const monthButton = target.closest<HTMLButtonElement>('[data-month]');
		if (!monthButton) return;

		event.preventDefault();

		const fieldWrapper = target.closest<HTMLDivElement>('[data-field]');
		if (!fieldWrapper) return;

		const hiddenInput = fieldWrapper.querySelector<HTMLInputElement>('input[type="hidden"]');
		if (!hiddenInput) return;

		const currentMonths = JSON.parse(hiddenInput.value) as Month[];
		const selectedMonth = monthButton.getAttribute('data-month') as Month;
		const monthIndex = currentMonths.indexOf(selectedMonth);
		const monthAlreadySelected = monthIndex > -1;

		if (monthAlreadySelected) {
			currentMonths.splice(monthIndex, 1);
			hiddenInput.value = JSON.stringify(currentMonths);
			monthButton.setAttribute('aria-pressed', 'false');
		} else {
			currentMonths.push(selectedMonth);
			hiddenInput.value = JSON.stringify(currentMonths);
			monthButton.setAttribute('aria-pressed', 'true');
		}
	});
</script>